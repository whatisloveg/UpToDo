// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UpToDo.Infrastructure.DataAccess;

#nullable disable

namespace UpToDo.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250530100827_AddTagsToUserLink")]
    partial class AddTagsToUserLink
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UpToDo.Domain.Subtask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("ToDoTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ToDoTaskId");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("UpToDo.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("UpToDo.Domain.TasksList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TasksLists");
                });

            modelBuilder.Entity("UpToDo.Domain.ToDoTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<decimal?>("EstimatedTime")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("MatrixPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("TasksListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TasksListId");

                    b.ToTable("ToDoTasks");
                });

            modelBuilder.Entity("UpToDo.Domain.ToDoTaskTag", b =>
                {
                    b.Property<Guid>("ToDoTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("ToDoTaskId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ToDoTaskTags");
                });

            modelBuilder.Entity("UpToDo.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UpToDo.Domain.Subtask", b =>
                {
                    b.HasOne("UpToDo.Domain.ToDoTask", "ToDoTask")
                        .WithMany("Subtasks")
                        .HasForeignKey("ToDoTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToDoTask");
                });

            modelBuilder.Entity("UpToDo.Domain.Tag", b =>
                {
                    b.HasOne("UpToDo.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UpToDo.Domain.User", null)
                        .WithMany("Tags")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UpToDo.Domain.TasksList", b =>
                {
                    b.HasOne("UpToDo.Domain.User", "User")
                        .WithMany("TasksLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UpToDo.Domain.ToDoTask", b =>
                {
                    b.HasOne("UpToDo.Domain.TasksList", "TasksList")
                        .WithMany("Tasks")
                        .HasForeignKey("TasksListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TasksList");
                });

            modelBuilder.Entity("UpToDo.Domain.ToDoTaskTag", b =>
                {
                    b.HasOne("UpToDo.Domain.Tag", "Tag")
                        .WithMany("ToDoTaskTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UpToDo.Domain.ToDoTask", "ToDoTask")
                        .WithMany("ToDoTaskTags")
                        .HasForeignKey("ToDoTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("ToDoTask");
                });

            modelBuilder.Entity("UpToDo.Domain.Tag", b =>
                {
                    b.Navigation("ToDoTaskTags");
                });

            modelBuilder.Entity("UpToDo.Domain.TasksList", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("UpToDo.Domain.ToDoTask", b =>
                {
                    b.Navigation("Subtasks");

                    b.Navigation("ToDoTaskTags");
                });

            modelBuilder.Entity("UpToDo.Domain.User", b =>
                {
                    b.Navigation("Tags");

                    b.Navigation("TasksLists");
                });
#pragma warning restore 612, 618
        }
    }
}
